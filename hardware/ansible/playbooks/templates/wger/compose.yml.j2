---
services:
  wger-web:
    image: ${CONTAINER_REGISTRY:-docker.io}/wger/server:latest
    restart: unless-stopped
    depends_on:
      wger-postgres:
        condition: service_healthy
      wger-cache:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - /mnt/data/wger-wger-static:/home/wger/static
      - /mnt/data/wger-wger-media:/home/wger/media
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8000
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    user: "1000:1000"
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    network_mode: service:tailscale

  wger-postgres:
    image: ${CONTAINER_REGISTRY:-docker.io}/postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${WGER_POSTGRES_USER:-wger}
      - POSTGRES_PASSWORD=${WGER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${WGER_POSTGRES_DB:-wger}
      - TZ=America/New_York
    env_file:
      - .env
    volumes:
      - /mnt/data/wger-postgres-data:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -U wger
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "1000:1000"
    cap_drop:
      - ALL
    network_mode: service:tailscale

  wger-cache:
    image: ${CONTAINER_REGISTRY:-docker.io}/redis:latest
    restart: unless-stopped
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - /mnt/data/wger-redis-data:/data
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    # You probably want to limit the memory usage of the cache, otherwise it might
    # hog all the available memory. Remove or change according to your needs.
    deploy:
      resources:
        limits:
          memory: 1G
    user: "1000:1000"
    cap_drop:
      - ALL
    network_mode: service:tailscale

  wger-celery-worker:
    image: ${CONTAINER_REGISTRY:-docker.io}/wger/server:latest
    restart: unless-stopped
    command: /start-worker
    env_file:
      - .env
    volumes:
      - /mnt/data/wger-wger-media:/home/wger/media
    depends_on:
      wger-web:
        condition: service_healthy
    healthcheck:
      test: celery -A wger inspect ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    user: "1000:1000"
    cap_drop:
      - ALL
    network_mode: service:tailscale

  wger-celery-beat:
    image: ${CONTAINER_REGISTRY:-docker.io}/wger/server:latest
    restart: unless-stopped
    command: /start-beat
    env_file:
      - .env
    volumes:
      - celery-beat:/home/wger/beat/
    depends_on:
      wger-celery-worker:
        condition: service_healthy
    user: "1000:1000"
    cap_drop:
      - ALL
    network_mode: service:tailscale

  tailscale:
    image: tailscale/tailscale:latest
    restart: unless-stopped
    hostname: wger
    volumes:
      - tailscale-tmp:/tmp
    environment:
      - TS_HOSTNAME={{ service_name }}
      - TS_USERSPACE=true
      - TS_EXTRA_ARGS=--advertise-tags={{ tailscale_advertise_tags_arg }}
      - TS_SOCKET=/tmp/tailscaled.sock
    cap_add:
      - NET_ADMIN
    env_file:
      - .env.tailscale
    networks:
      - internal

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - /mnt/data/wger-wger-static:/wger/static:ro
      - /mmt/data/wger-wger-media:/wger/media:ro
      - /mnt/data/wger-caddy-data:/data
      - caddy-config-tmp:/config
      - tailscale-tmp:/var/run/tailscale
    network_mode: service:tailscale

volumes:
  celery-beat:

  caddy-config-tmp:
  tailscale-tmp:

networks:
  internal:
    driver: bridge
