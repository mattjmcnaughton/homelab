---
services:
  langfuse-worker:
    image: ${CONTAINER_REGISTRY:-docker.io}/langfuse/langfuse-worker:3
    restart: always
    depends_on: &langfuse-depends-on
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
    environment: &langfuse-container-env
      DATABASE_URL: ${LANGFUSE_DATABASE_URL}
      SALT: ${LANGFUSE_DATABASE_SALT}
      ENCRYPTION_KEY: ${LANGFUSE_DATABASE_ENCRYPTION_KEY}
      TELEMETRY_ENABLED: false
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://localhost:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://localhost:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${LANGFUSE_CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_USE_AZURE_BLOB: ${LANGFUSE_USE_AZURE_BLOB:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_MINIO_SECRET_ACCESS_KEY}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://localhost:$LANGFUSE_MINIO_PORT}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_MINIO_SECRET_ACCESS_KEY}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:$LANGFUSE_MINIO_PORT}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${LANGFUSE_MINIO_SECRET_ACCESS_KEY}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-localhost}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${LANGFUSE_REDIS_AUTH}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}
    user: "1000:1000"
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    network_mode: service:tailscale

  langfuse-web:
    image: ${CONTAINER_REGISTRY:-docker.io}/langfuse/langfuse:3
    restart: always
    depends_on: *langfuse-depends-on
    environment:
      <<: *langfuse-container-env
      NEXTAUTH_URL: ${LANGFUSE_URL}
      NEXTAUTH_SECRET: ${LANGFUSE_NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}

      # Must be set to 0.0.0.0
      HOSTNAME: 0.0.0.0

    user: "1000:1000"
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    network_mode: service:tailscale

  langfuse-clickhouse:
    image: ${CONTAINER_REGISTRY:-docker.io}/clickhouse/clickhouse-server
    restart: always
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${LANGFUSE_CLICKHOUSE_PASSWORD}
    volumes:
      - /mnt/data/langfuse-clickhouse-data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s
    network_mode: service:tailscale
    cap_drop:
      - ALL

  langfuse-minio:
    image: ${CONTAINER_REGISTRY:-docker.io}/minio/minio
    restart: always
    entrypoint: sh
    # create the 'langfuse' bucket before starting the service
    command: -c 'mkdir -p /data/langfuse && minio server --address ":${LANGFUSE_MINIO_PORT}" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${LANGFUSE_MINIO_SECRET_ACCESS_KEY}
    volumes:
      - /mnt/data/langfuse-minio-data:/data
    healthcheck:
      # Opt-out of rich healthcheck because I don't want to configure `mc` to
      # use a non-standard port.
      test: ["CMD-SHELL", "echo 'hi'"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s
    network_mode: service:tailscale
    user: "1000:1000"
    cap_drop:
      - ALL

  langfuse-redis:
    image: ${CONTAINER_REGISTRY:-docker.io}/redis:7
    restart: always
    command: >
      --requirepass ${LANGFUSE_REDIS_AUTH}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    network_mode: service:tailscale
    # Let Redis run as root... otherwise it complains...

  langfuse-postgres:
    image: ${CONTAINER_REGISTRY:-docker.io}/postgres:${POSTGRES_VERSION:-latest}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${LANGFUSE_POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - /mnt/data/langfuse-postgres-data:/var/lib/postgresql/data
    network_mode: service:tailscale
    user: "1000:1000"
    cap_drop:
      - ALL

  tailscale:
    image: tailscale/tailscale:latest
    restart: unless-stopped
    hostname: langfuse
    volumes:
      - tailscale-tmp:/tmp
    environment:
      - TS_HOSTNAME={{ service_name }}
      - TS_USERSPACE=true
      - TS_EXTRA_ARGS=--advertise-tags={{ tailscale_advertise_tags_arg }}
      - TS_SOCKET=/tmp/tailscaled.sock
    cap_add:
      - NET_ADMIN
    env_file:
      - .env.tailscale
    networks:
      - internal

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - /mnt/data/langfuse-caddy-data:/data
      - caddy-config-tmp:/config
      - tailscale-tmp:/var/run/tailscale
    depends_on:
      - langfuse-web
    network_mode: service:tailscale

networks:
  internal:
    driver: bridge

volumes:
  langfuse_clickhouse_logs:
  caddy-config-tmp:
  tailscale-tmp:
